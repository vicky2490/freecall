{"version":3,"sources":["App.js","components/Cards/Card.js","components/GameIndex/GameIndex.js","serviceWorker.js","index.js"],"names":["App","react_default","a","createElement","className","react_router_dom","to","Card","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","getCardImgCssName","eachColor","number","cssName","state","card","cardRows","key","p","name","num","concat","Component","GameIndex","row","j","push","i","swapA","Math","floor","random","swapB","temp","rowSwapA","rowSwapB","rowTemp","k","step","content","_","take","map","data","dataIdex","drop","setState","components_Cards_Card","Boolean","window","location","hostname","match","history","createHashHistory","ReactDOM","render","react_router","exact","path","component","Game","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bf74bf45.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport { Link } from 'react-router-dom'\n\nfunction App() {\n  return (\n    <div className=\"wrap\">\n      <div className=\"index-menu\">\n        <div className=\"index-menu-box\">\n          <Link to=\"/game\"><button className=\"start-button\">START</button></Link>\n          <div className=\"caption\">How to play?</div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React, { Component } from 'react';\nimport './Card.css';\n\n\nclass Card extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      card: [],\n      cardRows: [],\n    } \n  }\n\n  getCardImgCssName = (eachColor, number) => {\n    let cssName = '';\n    switch (eachColor) {\n      case 0:\n        cssName += 'spade-'\n        break;\n      case 1:\n        cssName += 'heart-'\n        break;\n      case 2:\n        cssName += 'club-'\n        break;\n      case 3:\n        cssName += 'diamond-'\n        break;\n      default:\n        break;\n    }\n    cssName += number;\n    return cssName;\n  }\n\n  render() {\n    let cardRows = this.props.cardRows;\n    let key = this.props.p;\n    let name = this.getCardImgCssName(cardRows.eachColor, cardRows.num);\n    return (\n    <div className={`${name} card top-${key}`}>\n    </div>\n    )\n  }\n}\n\nexport default Card;\n","import React, { Component } from 'react';\nimport './GameIndex.css';\nimport _ from 'lodash';\nimport Card from '../Cards/Card';\n\nclass GameIndex extends Component {\n\n  constructor() {\n    super();\n    this.state = {\n      card: [],\n      cardRows: [],\n    } \n  }\n\n  // 畫面出來前 給予card預設值(洗牌,每排幾張)以及發牌\n  componentWillMount () {\n    let card = [];\n    let row = [7,7,7,7,6,6,6,6];\n    let cardRows = [];\n    for (let j=0; j<52; j++) {\n      card.push(j);\n    }\n    for (let i=0; i<50; i++) {\n      let swapA = Math.floor(Math.random()*(52))+1;\n      let swapB = Math.floor(Math.random()*(52))+1;\n      let temp = card[swapA-1];\n      card[swapA-1] = card[swapB-1];\n      card[swapB-1] = temp;\n      // 位置幾張\n      let rowSwapA = Math.floor(Math.random()*(8))+1;\n      let rowSwapB = Math.floor(Math.random()*(8))+1;\n      let rowTemp = row[rowSwapA-1];\n      row[rowSwapA-1] = row[rowSwapB-1];\n      row[rowSwapB-1] = rowTemp;\n    }\n\n    // 發牌\n    for (let k=0; k<8; k++) {\n      let step = row[k];\n      let content = _.take(card, step);\n      content = _.map(content, function(data){\n        return {\n          eachColor: Math.floor(data/13),\n          num: (data + 1) % 13 === 0 ? 13 : (data + 1) % 13, \n          dataIdex: data,\n        }\n      });  \n\n      cardRows.push({\n        row: k+1,\n        content,\n      });\n      card = _.drop(card, step);\n    }\n\n    this.setState({\n      card, \n      cardRows, \n    })\n  }\n\n  render() {\n    return (\n      <div className=\"game-wrap\">\n        <div className=\"header\">\n          <div className=\"title\">FREECELL</div>\n          <div className=\"count-bar\">\n            <div className=\"count-time-move\">TIME:</div>\n            <div className=\"count-time-move count-num\">00:00</div>\n            <div className=\"count-time-move\">MOVE:</div>\n            <div className=\"count-time-move count-num\">00</div>\n          </div>\n        </div>\n        <div className=\"context\">\n          <div className=\"vacancy-box\"></div>\n          <div className=\"vacancy-box\"></div>\n          <div className=\"vacancy-box\"></div>\n          <div className=\"vacancy-box\"></div>\n          <div className=\"standard-box suithearts\"></div>\n          <div className=\"standard-box suitdiamonds\"></div>\n          <div className=\"standard-box suitclubs\"></div>\n          <div className=\"standard-box suitspades\"></div>\n\n          <div className=\"card-row\">\n          {\n            this.state.cardRows[0].content.map((data, i) => <Card key={i} cardRows={data} p={i}/>)\n          }\n          </div>\n          <div className=\"card-row\">\n          {\n            this.state.cardRows[1].content.map((data, i) => <Card key={i} cardRows={data} p={i}/>)\n          }\n          </div>\n          <div className=\"card-row\">\n          {\n            this.state.cardRows[2].content.map((data, i) => <Card key={i} cardRows={data} p={i}/>)\n          }\n          </div>\n          <div className=\"card-row\">\n          {\n            this.state.cardRows[3].content.map((data, i) => <Card key={i} cardRows={data} p={i}/>)\n          }\n          </div>\n          <div className=\"card-row\">\n          {\n            this.state.cardRows[4].content.map((data, i) => <Card key={i} cardRows={data} p={i}/>)\n          }\n          </div>\n          <div className=\"card-row\">\n          {\n            this.state.cardRows[5].content.map((data, i) => <Card key={i} cardRows={data} p={i}/>)\n          }\n          </div>\n          <div className=\"card-row\">\n          {\n            this.state.cardRows[6].content.map((data, i) => <Card key={i} cardRows={data} p={i}/>)\n          }\n          </div>\n          <div className=\"card-row\">\n          {\n            this.state.cardRows[7].content.map((data, i) => <Card key={i} cardRows={data} p={i}/>)\n          }\n          </div>\n          <div className=\"game-menu\">\n            <div className=\"material-icons setting\">power_settings_new</div>\n            <div className=\"material-icons setting\">pause</div>\n            <button className=\"menu-btn\">UNDO</button>\n            <div className=\"material-icons setting\">replay</div>\n            <div className=\"material-icons setting\">help_outline</div>\n          </div>                \n        </div>\n      </div>\n    )\n  }\n\n}\n\nexport default GameIndex;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './css/cssReset.css';\nimport { Switch, Router, Route } from 'react-router';\nimport { createHashHistory } from 'history';\nimport App from './App';\nimport Game from './components/GameIndex/GameIndex';\nimport * as serviceWorker from './serviceWorker';\n\nconst history = createHashHistory();\n\nReactDOM.render((\n  <Router history={history}>\n    <Switch>\n      <Route exact path=\"/\" component={App}/>\n      <Route path=\"/game\" component={Game}/>\n    </Switch>\n  </Router>\n  ), document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}