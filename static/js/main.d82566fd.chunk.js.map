{"version":3,"sources":["App.js","components/Cards/Card.js","components/GameIndex/GameIndex.js","serviceWorker.js","index.js"],"names":["App","react_default","a","createElement","className","react_router_dom","to","Card","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","dragStart","e","dataTransfer","setData","target","id","sourceContainerId","setSourceContainerId","getCardImgCssName","eachColor","number","cssName","state","card","cardRows","_this2","document","querySelectorAll","forEach","dragSource","addEventListener","name","num","draggable","isLastCard","source","key","p","rowIndex","concat","Boolean","Component","GameIndex","cancelDefault","preventDefault","stopPropagation","dropped","console","log","rowData","data","getData","split","arrayName","colorOfSourceCard","numOfSourceCard","newTargetContainer","_","clone","targetContainer","targetBoxIndex","targetElement","length","parentElement","targetClassName","isInVacancyBox","isInStandardBox","isSameColor","Number","lastTargetContainerObject","last","isOrderCard","content","pop","setState","dropTarget","row","j","push","i","swapA","Math","floor","random","swapB","temp","rowSwapA","rowSwapB","rowTemp","_loop","k","step","take","map","index","dataIdex","drop","_this3","data-role","components_Cards_Card","l","window","location","hostname","match","history","createHashHistory","ReactDOM","render","react_router","exact","path","component","Game","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d82566fd.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport { Link } from 'react-router-dom'\n\nfunction App() {\n  return (\n    <div className=\"wrap\">\n      <div className=\"index-menu\">\n        <div className=\"index-menu-box\">\n          <Link to=\"/game\"><button className=\"start-button\">START</button></Link>\n          <div className=\"caption\">How to play?</div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React, { Component } from 'react';\nimport './Card.css';\n\n\nclass Card extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      card: [],\n      cardRows: [],\n    }\n  }\n\n  componentDidMount() {\n    let dragSources = document.querySelectorAll('[draggable=\"true\"]')\n    dragSources.forEach(dragSource => {\n      dragSource.addEventListener('dragstart', this.dragStart)\n    })\n  }\n\n  dragStart = (e) => {\n    e.dataTransfer.setData('text/plain', e.target.id)\n    let sourceContainerId = e.target.id\n    if (this.props.setSourceContainerId) {\n      this.props.setSourceContainerId(sourceContainerId)\n    }\n  }\n\n  getCardImgCssName = (eachColor, number) => {\n    let cssName = '';\n    switch (eachColor) {\n      case 0:\n        cssName += 'spade-'\n        break;\n      case 1:\n        cssName += 'heart-'\n        break;\n      case 2:\n        cssName += 'club-'\n        break;\n      case 3:\n        cssName += 'diamond-'\n        break;\n      default:\n        break;\n    }\n    cssName += number;\n    return cssName;\n  }\n\n  render() {\n    let cardRows = this.props.cardRows;\n    let name = this.getCardImgCssName(cardRows.eachColor, cardRows.num);\n    let draggable =  this.props.isLastCard;\n    let source =  this.props.source;\n    let key = source==='drag' ? this.props.p : 'auto';\n    let rowIndex = this.props.rowIndex;\n\n    return (\n    <div className={`${name} card top-${key}`} draggable={Boolean(draggable)} id={`${source}-${cardRows.eachColor}-${cardRows.num}-${rowIndex}`}>\n    </div>\n    )\n  }\n}\n\nexport default Card;\n","import React, { Component } from 'react';\nimport './GameIndex.css';\nimport _ from 'lodash';\nimport Card from '../Cards/Card';\n\nclass GameIndex extends Component {\n\n  constructor() {\n    super();\n    this.state = {\n      card: [],\n      cardRows: [],\n      sourceContainerId: '',\n      targetContainer: [[],[],[],[],[],[],[],[]],\n    } \n  }\n\n  componentDidMount() {\n    let dropTargets = document.querySelectorAll('[data-role=\"drag-drop-container\"]')\n    dropTargets.forEach(dropTarget => {\n      dropTarget.addEventListener('drop', this.dropped)\n      dropTarget.addEventListener('dragenter', this.cancelDefault)\n      dropTarget.addEventListener('dragover', this.cancelDefault)\n    })\n   }\n\n  cancelDefault = (e) => {\n    e.preventDefault()\n    e.stopPropagation()\n    return false\n  }\n\n  dropped = (e) => {\n    console.log('dropped')\n    let data = e.dataTransfer.getData('text/plain').split('-');\n    let arrayName = data[0];\n    let colorOfSourceCard = data[1];\n    let numOfSourceCard = data[2];\n    let rowIndex = data[3];\n    let rowData;\n    let cardRows = this.state.cardRows;\n    let newTargetContainer = _.clone(this.state.targetContainer);\n    let targetData = e.target.id.split('-');\n    let targetBoxIndex = targetData[3];\n\n    // get vacancyBox or standardBox\n    let targetElement = newTargetContainer[`${targetBoxIndex}`].length >= 1 ? e.target.parentElement : e.target;\n    let targetClassName = targetElement.className.split(' ')[0];\n    let isInVacancyBox = targetClassName === 'vacancy-box';\n    let isInStandardBox = targetClassName === 'standard-box';\n\n    // 花色比對\n    let colorOfTargetContainer = targetElement.className.split(' ')[1];\n   \n    let isSameColor = false;\n    switch (colorOfTargetContainer) {\n      case 'suithearts':\n        isSameColor = Number(colorOfSourceCard) === 1;\n        break;\n      case 'suitdiamonds':\n        isSameColor = Number(colorOfSourceCard) === 3;\n        break;\n      case 'suitclubs':\n        isSameColor = Number(colorOfSourceCard) === 2;\n        break;\n      case 'suitspades':\n        isSameColor = Number(colorOfSourceCard) === 0;\n        break;\n    \n      default:\n        break;\n    }\n\n    // 比較數字\n    let lastTargetContainerObject = _.last(newTargetContainer[`${targetBoxIndex}`]);\n    let numOfTarget = lastTargetContainerObject ? lastTargetContainerObject.num : 0;\n    let isOrderCard = numOfTarget === numOfSourceCard-1;\n  \n    if (isInVacancyBox && newTargetContainer[`${targetBoxIndex}`].length >= 1) {\n      this.cancelDefault(e)\n    } else if (isInStandardBox && !isSameColor){\n      this.cancelDefault(e)\n    } else if (isInStandardBox && isSameColor && !isOrderCard){\n      this.cancelDefault(e)\n    } else {\n      if (arrayName === 'drag') {\n        rowData = cardRows[`${rowIndex}`].content.pop();\n      } else if (arrayName === 'dropped') {\n        rowData = newTargetContainer[`${rowIndex}`].pop();\n      }\n      newTargetContainer[`${targetBoxIndex}`] = newTargetContainer[`${targetBoxIndex}`].concat([rowData]);\n          \n      this.cancelDefault(e)\n      this.setState({\n        cardRows, \n        targetContainer: newTargetContainer,\n      })\n    }\n  }\n\n\n  // 畫面出來前 給予card預設值(洗牌,每排幾張)以及發牌\n  componentWillMount () {\n    let card = [];\n    let row = [7,7,7,7,6,6,6,6];\n    let cardRows = [];\n    for (let j=0; j<52; j++) {\n      card.push(j);\n    }\n    for (let i=0; i<50; i++) {\n      let swapA = Math.floor(Math.random()*(52))+1;\n      let swapB = Math.floor(Math.random()*(52))+1;\n      let temp = card[swapA-1];\n      card[swapA-1] = card[swapB-1];\n      card[swapB-1] = temp;\n      // 位置幾張\n      let rowSwapA = Math.floor(Math.random()*(8))+1;\n      let rowSwapB = Math.floor(Math.random()*(8))+1;\n      let rowTemp = row[rowSwapA-1];\n      row[rowSwapA-1] = row[rowSwapB-1];\n      row[rowSwapB-1] = rowTemp;\n    }\n\n    // 發牌\n    for (let k=0; k<8; k++) {\n      let step = row[k];\n      let content = _.take(card, step);\n      content = _.map(content, function(data, index){\n        return {\n          eachColor: Math.floor(data/13),\n          num: (data + 1) % 13 === 0 ? 13 : (data + 1) % 13, \n          dataIdex: data,\n          rowIndex: k,\n        }\n      });  \n\n      cardRows.push({\n        row: k+1,\n        content,\n      });\n      card = _.drop(card, step);\n    }\n\n    this.setState({\n      card, \n      cardRows, \n    })\n  }\n\n  setSourceContainerId = (sourceContainerId) => {\n    this.setState({\n      sourceContainerId, \n    })\n  }  \n\n  render() {\n    return (\n      <div className=\"game-wrap\">\n        <div className=\"header\">\n          <div className=\"title\">FREECELL</div>\n          <div className=\"count-bar\">\n            <div className=\"count-time-move\">TIME:</div>\n            <div className=\"count-time-move count-num\">00:00</div>\n            <div className=\"count-time-move\">MOVE:</div>\n            <div className=\"count-time-move count-num\">00</div>\n          </div>\n        </div>\n        <div className=\"context\">\n          <div className=\"vacancy-box\" id=\"dropped-target-container-0\" data-role=\"drag-drop-container\">\n          {\n            this.state.targetContainer[0].map((data, i) => <Card key={i} cardRows={data} p={i} rowIndex={0} source={'dropped'} isLastCard={this.state.targetContainer[0].length === (i+1)} setSourceContainerId={(l) => this.setSourceContainerId(l)}/>)\n          }       \n          </div>\n          <div className=\"vacancy-box\" id=\"dropped-target-container-1\" data-role=\"drag-drop-container\">\n          {\n            this.state.targetContainer[1].map((data, i) => <Card key={i} cardRows={data} p={i} rowIndex={1} source={'dropped'} isLastCard={this.state.targetContainer[1].length === (i+1)} setSourceContainerId={(l) => this.setSourceContainerId(l)}/>)\n          } \n          </div>\n          <div className=\"vacancy-box\" id=\"dropped-target-container-2\" data-role=\"drag-drop-container\">\n          {\n            this.state.targetContainer[2].map((data, i) => <Card key={i} cardRows={data} p={i} rowIndex={2} source={'dropped'} isLastCard={this.state.targetContainer[2].length === (i+1)} setSourceContainerId={(l) => this.setSourceContainerId(l)}/>)\n          } \n          </div>\n          <div className=\"vacancy-box\" id=\"dropped-target-container-3\" data-role=\"drag-drop-container\">\n          {\n            this.state.targetContainer[3].map((data, i) => <Card key={i} cardRows={data} p={i} rowIndex={3} source={'dropped'} isLastCard={this.state.targetContainer[3].length === (i+1)} setSourceContainerId={(l) => this.setSourceContainerId(l)}/>)\n          } \n          </div>\n          <div className=\"standard-box suithearts\" id=\"dropped-target-container-4\" data-role=\"drag-drop-container\">\n          {\n            this.state.targetContainer[4].map((data, i) => <Card key={i} cardRows={data} p={i} rowIndex={4} source={'dropped'} isLastCard={this.state.targetContainer[4].length === (i+1)} setSourceContainerId={(l) => this.setSourceContainerId(l)}/>)\n          } \n          </div>\n          <div className=\"standard-box suitdiamonds\" id=\"dropped-target-container-5\" data-role=\"drag-drop-container\">\n          {\n            this.state.targetContainer[5].map((data, i) => <Card key={i} cardRows={data} p={i} rowIndex={5} source={'dropped'} isLastCard={this.state.targetContainer[5].length === (i+1)} setSourceContainerId={(l) => this.setSourceContainerId(l)}/>)\n          } \n          </div>\n          <div className=\"standard-box suitclubs\" id=\"dropped-target-container-6\" data-role=\"drag-drop-container\">\n          {\n            this.state.targetContainer[6].map((data, i) => <Card key={i} cardRows={data} p={i} rowIndex={6} source={'dropped'} isLastCard={this.state.targetContainer[6].length === (i+1)} setSourceContainerId={(l) => this.setSourceContainerId(l)}/>)\n          } \n          </div>\n          <div className=\"standard-box suitspades\" id=\"dropped-target-container-7\" data-role=\"drag-drop-container\">\n          {\n            this.state.targetContainer[7].map((data, i) => <Card key={i} cardRows={data} p={i} rowIndex={7} source={'dropped'} isLastCard={this.state.targetContainer[7].length === (i+1)} setSourceContainerId={(l) => this.setSourceContainerId(l)}/>)\n          } \n          </div>\n\n          <div className=\"card-row\">\n          {\n            this.state.cardRows[0].content.map((data, i) => <Card key={i} cardRows={data} p={i} rowIndex={0} source={'drag'} isLastCard={this.state.cardRows[0].content.length === (i+1)} setSourceContainerId={(l) => this.setSourceContainerId(l)}/>)\n          }\n          </div>\n          <div className=\"card-row\">\n          {\n            this.state.cardRows[1].content.map((data, i) => <Card key={i} cardRows={data} p={i} rowIndex={1} source={'drag'} isLastCard={this.state.cardRows[1].content.length === (i+1)} setSourceContainerId={(l) => this.setSourceContainerId(l)}/>)\n          }\n          </div>\n          <div className=\"card-row\">\n          {\n            this.state.cardRows[2].content.map((data, i) => <Card key={i} cardRows={data} p={i} rowIndex={2} source={'drag'} isLastCard={this.state.cardRows[2].content.length === (i+1)} setSourceContainerId={(l) => this.setSourceContainerId(l)}/>)\n          }\n          </div>\n          <div className=\"card-row\">\n          {\n            this.state.cardRows[3].content.map((data, i) => <Card key={i} cardRows={data} p={i} rowIndex={3} source={'drag'} isLastCard={this.state.cardRows[3].content.length === (i+1)} setSourceContainerId={(l) => this.setSourceContainerId(l)}/>)\n          }\n          </div>\n          <div className=\"card-row\">\n          {\n            this.state.cardRows[4].content.map((data, i) => <Card key={i} cardRows={data} p={i} rowIndex={4} source={'drag'} isLastCard={this.state.cardRows[4].content.length === (i+1)} setSourceContainerId={(l) => this.setSourceContainerId(l)}/>)\n          }\n          </div>\n          <div className=\"card-row\">\n          {\n            this.state.cardRows[5].content.map((data, i) => <Card key={i} cardRows={data} p={i} rowIndex={5} source={'drag'} isLastCard={this.state.cardRows[5].content.length === (i+1)} setSourceContainerId={(l) => this.setSourceContainerId(l)}/>)\n          }\n          </div>\n          <div className=\"card-row\">\n          {\n            this.state.cardRows[6].content.map((data, i) => <Card key={i} cardRows={data} p={i} rowIndex={6} source={'drag'} isLastCard={this.state.cardRows[6].content.length === (i+1)} setSourceContainerId={(l) => this.setSourceContainerId(l)}/>)\n          }\n          </div>\n          <div className=\"card-row\">\n          {\n            this.state.cardRows[7].content.map((data, i) => <Card key={i} cardRows={data} p={i} rowIndex={7} source={'drag'} isLastCard={this.state.cardRows[7].content.length === (i+1)} setSourceContainerId={(l) => this.setSourceContainerId(l)}/>)\n          }\n          </div>\n          <div className=\"game-menu\">\n            <div className=\"material-icons setting\">power_settings_new</div>\n            <div className=\"material-icons setting\">pause</div>\n            <button className=\"menu-btn\">UNDO</button>\n            <div className=\"material-icons setting\">replay</div>\n            <div className=\"material-icons setting\">help_outline</div>\n          </div>                \n        </div>\n      </div>\n    )\n  }\n\n}\n\nexport default GameIndex;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './css/cssReset.css';\nimport { Switch, Router, Route } from 'react-router';\nimport { createHashHistory } from 'history';\nimport App from './App';\nimport Game from './components/GameIndex/GameIndex';\nimport * as serviceWorker from './serviceWorker';\n\nconst history = createHashHistory();\n\nReactDOM.render((\n  <Router history={history}>\n    <Switch>\n      <Route exact path=\"/\" component={App}/>\n      <Route path=\"/game\" component={Game}/>\n    </Switch>\n  </Router>\n  ), document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}